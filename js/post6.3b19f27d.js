(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["post6"],{6939:function(n,t){n.exports={attributes:{title:"CSS 的过渡效果和变形（transition & transform）",subtitle:"过渡动画和变形可以赋予页面生命力。",date:"2017-10-15T16:00:00.000Z",externalCSS:"transition-transform",tags:["CSS"]},body:'\n### transition 过渡效果\n\n先贴一份 W3 官方的说明文档：[CSS Transitions](https://www.w3.org/TR/css3-transitions/#transition-property-property)。\n\nCSS 的 transition 属性可以让我们从此放弃简单的 JS 动画，因为 CSS 就可以做到了。先来看看兼容性和各个浏览器的写法。\n\n> Internet Explorer 10、Firefox、Opera 和 Chrome 支持 transition 属性。  \n>  Safari 支持替代的 -webkit-transition 属性。  \n>  注释：Internet Explorer 9 以及更早版本的浏览器不支持 transition 属性。\n\n```css\n.test {\n  /*各个浏览器下的写法*/\n  /*@prop 过渡效果作用的属性*/\n  /*@time 过渡效果持续的时间，单位为 s 或者 ms */\n  -webkit-transition: prop time; /*Chrome and Safari*/\n  -moz-transition: prop time; /*FireFox*/\n  -ms-transition: prop time; /*IE*/\n  -o-transition: prop time; /*Opera*/\n  transition: prop time; /*标准写法*/\n}\n```\n\n上面是各个浏览器的写法和属性的最基本构成。过渡属性一般需要两个参数，第一个表述让过渡效果触发的属性，默认是 `all`，即当所有支持的属性发生改变时都将触发过渡效果，这就像是一个监听器，我们要做的是告诉监听器我们需要监控的属性。第二个属性是过渡效果的持续时间，单位可以为`s`或者`ms`。先来看一个例子 🌰。\n\n下面是一个例子，通过触发 hover 事件来看看它的效果，把鼠标移到色块上吧，当然如果你是移动设备，手指轻触色块。\n\n<div class="test-container">\n    <div class="contents test"></div>\n</div>\n\n是不是很酷炫，其实实现这个效果的 css 很简单，大家请看：\n\n```css\n.test {\n  background-color: darksalmon;\n  transition: all 2s;\n}\n\n.test:hover {\n  background-color: violet;\n  width: 300px;\n}\n```\n\n我们先来看看需要我们设置的参数。\n\n```css\ntransition: [<transition-property> || <transition-duration>\n        || <transition-timing-function> || <transition-delay>]\n        [, [<transition-property> || <transition-duration>\n        || <transition-timing-function> || <transition-delay>]]*);\n```\n\n过渡效果有四个可设定的参数，并且每个参数之间使用空格隔开，逗号将分隔新的过渡效果设定。\n\n**`transition-property`** 过渡效果作用的属性。只有有中间值的属性才支持过渡效果。\n\n取值：`all | none | <property>[ ,<property> ]*`\n\n默认值：`all`\n\n作用对象：所有元素，包括 `:before` 和 `:after` 伪元素\n\n继承：`no`\n\n下面是指定背景颜色为过渡属性的例子，注意宽度的变化没有过渡效果。鼠标悬停展示效果，或者如果你使用移动设备，手指轻触也可以触发效果。\n\n<div class="test-container">\n    <div class="contents test-prop"></div>\n</div>\n\n这个效果的 CSS 属性：\n\n```css\n.test-prop {\n  background-color: grey;\n  transition: background-color 1s;\n}\n\n.test-prop:hover {\n  background-color: #269abc;\n  width: 300px;\n}\n```\n\n**`transition-duration`** 持续时间。\n\n取值：`<time> [, <time>]*`\n\n默认值：`0s`\n\n作用对象：所有元素，包括 `:before` 和 `:after` 伪元素\n\n继承：`no`\n\n下面两个例子展示了不同持续时间的效果。\n\n<div class="test-container">\n    <div class="contents test-dura-1s"></div>\n</div>\n<div class="test-container">\n    <div class="contents test-dura-5s"></div>\n</div>\n\n下面是它们的 css：\n\n```css\n.test-dura-1s {\n  background-color: skyblue;\n  transition: all 1s;\n}\n\n.test-dura-1s:hover {\n  background-color: yellowgreen;\n  width: 300px;\n}\n\n.test-dura-5s {\n  background-color: skyblue;\n  transition: all 5s;\n}\n\n.test-dura-5s:hover {\n  background-color: yellowgreen;\n  width: 300px;\n}\n```\n\n**`transition-timing-function`** 过渡效果。\n\n取值：`<single-transition-timing-function> [ ‘,’ <single-transition-timing-function> ]*`\n\n默认值：`ease`\n\n作用对象：所有元素，包括 `:before` 和 `:after` 伪元素\n\n继承：`no`\n\n可选值：`ease | linear | ease-in | ease-out | ease-in-out | step-start | step-end | steps(<integer>[, [ start | end ] ]?) | cubic-bezier(<number>, <number>, <number>, <number>)`\n\n引用网上的解释。\n\n> `linear`：  \n>  线性过渡。等同于贝塞尔曲线(0.0, 0.0, 1.0, 1.0)  \n>  `ease`：  \n>  平滑过渡。等同于贝塞尔曲线(0.25, 0.1, 0.25, 1.0)  \n>  `ease-in`：  \n>  由慢到快。等同于贝塞尔曲线(0.42, 0, 1.0, 1.0)  \n>  `ease-out`：  \n>  由快到慢。等同于贝塞尔曲线(0, 0, 0.58, 1.0)  \n>  `ease-in-out`：  \n>  由慢到快再到慢。等同于贝塞尔曲线(0.42, 0, 0.58, 1.0)  \n>  `cubic-bezier(<number>, <number>, <number>, <number>)`：  \n>  特定的贝塞尔曲线类型，4 个数值需在[0, 1]区间内\n\n`linear` 中规中矩的过渡；`ease` 开始和结束稍有缓冲；`ease-in` 滑动从慢到快；`ease-out` 滑动从快到慢；`ease-in-out` 开始和结束的缓冲较为明显。\n\n`cubic-bezier` 这个复杂一点。由四个点控制，开始(`p0`)是[0,0]，结束(`p3`)是[1,1]，我们需要设定中间俩个点(`p1`,`p2`)的坐标，来得到我们想要的曲线。文字表述不好理解，来看看下面这张图。\n\n![TimingFunction](/img/TimingFunction.png)\n\n话不多说，看几个常用的例子。鼠标经过查看效果。为了凸显过渡效果的不同点，这里把持续时间设定到了 2 秒，个人认为实际运用在 0.5 秒左右比较合适。\n\n<div class="test-container">\n    <div class="contents test-linear">linear</div>\n</div>\n\n<div class="test-container">\n    <div class="contents test-ease">ease</div>\n</div>\n\n<div class="test-container">\n    <div class="contents test-ease-in two-line">ease<br>in</div>\n</div>\n\n<div class="test-container">\n    <div class="contents test-ease-out two-line">ease<br>out</div>\n</div>\n\n<div class="test-container">\n    <div class="contents test-ease-in-out two-line">ease<br>in-out</div>\n</div>\n\n下面是这五个样例的 CSS 属性：\n\n```css\n.test-linear {\n  background-color: pink;\n  transition: all 2s linear;\n}\n\n.test-linear:hover {\n  background-color: rebeccapurple;\n  width: 300px;\n  color: white;\n}\n\n.test-ease {\n  background-color: pink;\n  transition: all 2s ease;\n}\n\n.test-ease:hover {\n  background-color: rebeccapurple;\n  width: 300px;\n  color: white;\n}\n\n.test-ease-in {\n  background-color: pink;\n  transition: all 2s ease-in;\n}\n\n.test-ease-in:hover {\n  background-color: rebeccapurple;\n  width: 300px;\n  color: white;\n}\n\n.test-ease-out {\n  background-color: pink;\n  transition: all 2s ease-out;\n}\n\n.test-ease-out:hover {\n  background-color: rebeccapurple;\n  width: 300px;\n  color: white;\n}\n\n.test-ease-in-out {\n  background-color: pink;\n  transition: all 2s ease-in-out;\n}\n\n.test-ease-in-out:hover {\n  background-color: rebeccapurple;\n  width: 300px;\n  color: white;\n}\n```\n\n此外还有一个 steps 的过渡效果，也说不上过渡，是一步一步展示递进的效果，看看下面的例子就知道了。\n\n<div class="test-container">\n    <div class="contents test-steps two-line">steps<br>5</div>\n</div>\n\n它的 CSS 属性如下：\n\n```css\n.test-steps {\n  background-color: pink;\n  transition: all 1s steps(5);\n}\n\n.test-steps:hover {\n  background-color: rebeccapurple;\n  width: 300px;\n  color: white;\n}\n```\n\n`transition-delay` 过渡效果前延迟。\n\n取值：`<time> [, <time>]*`\n\n默认值：`0s`\n\n作用对象：所有元素，包括 `:before` 和 `:after` 伪元素\n\n继承：`no`\n\n下面对比下无延迟和有延迟时的效果。鼠标经过展示效果。下面的色块鼠标放上请耐心等待 2 秒。\n\n<div class="test-container">\n    <div class="contents test-delay-0s two-line">delay<br>0s</div>\n</div>\n\n<div class="test-container">\n    <div class="contents test-delay-2s two-line">delay<br>2s</div>\n</div>\n\n下面是 CSS 属性：\n\n```css\n.test-delay-0s {\n  background-color: orangered;\n  transition: all 2s ease;\n}\n.test-delay-0s:hover {\n  background-color: blueviolet;\n  width: 300px;\n  color: white;\n}\n\n.test-delay-2s {\n  background-color: orangered;\n  transition: all 1s ease 2s;\n}\n.test-delay-2s:hover {\n  background-color: blueviolet;\n  width: 300px;\n  color: white;\n}\n```\n\n差不多了。知道上面这些，我们就已经具备了做出好看的过渡效果的能力。下面让我们看看另一个属性。\n\n### CSS 的 transform 属性\n\nTransform 是变形的意思。就如字面意思一样，CSS 的 transform 属性的作用就是给指定元素变形。这个属性配合上面我们介绍的属性可以获得很棒的效果，我们先来看一个例子。\n\n<div class="test-container-big">\n    <div class="contents test-transform"></div>\n</div>\n\n或许我展现的效果不是很好，但是这确实是很实用很酷炫的东西。变形属性可以让元素按照我们的想法自由变换，而过渡效果的加入使得我们所定义的变形可以平缓的展开和回收。再让我们看几个网上的示例吧，这次找几个看上去实用又酷炫的。\n\n<div class="test-container">\n    <div class="contents test-transform-back"><div class="fill two-line">ROTATE</div></div>\n    <div class="contents test-transform-back second"><div class="fill two-line">SCALE</div></div>\n    <div class="contents test-transform-back third"><div class="fill two-line">TRANSLATE</div></div>\n</div>\n\n<div class="test-container second height-plus">\n    <div class="contents test-transform-back"><div class="fill two-line">ROTATE-X</div></div>\n    <div class="contents test-transform-back second"><div class="fill two-line">ROTATE-Y</div></div>\n    <div class="contents test-transform-back third"><div class="fill two-line">ROTATE(O)</div></div>\n</div>\n\n是不是有一种想马上使用一下的冲到呢？设置很简单，第一排 2D 变换单独使用 `transform` 属性即可实现，第二排 3D 变换还加入了一个 `perspective（透视）`属性，第二排后面两个同时使用了 `transform-origin` 定义旋转的圆心点。\n\n第一排，从左到右：\n\n```css\n/*通用的容器设定*/\n.test-transform-back .fill {\n  background-color: #5bdaff;\n  transition: all 0.3s ease;\n  opacity: 0.5;\n}\n\n/*ROTATE*/\n.test-transform-back:hover .fill {\n  transform: rotate(45deg);\n}\n\n/*SCALE*/\n.test-transform-back.second:hover .fill {\n  transform: scale(2);\n}\n\n/*TRANSLATE*/\n.test-transform-back.third:hover .fill {\n  transform: translate(15px, 15px);\n}\n```\n\n第二排，从左到右：\n\n```css\n/*通用容器追加透视属性*/\n.test-container.second .test-transform-back {\n  perspective: 100px;\n}\n\n/*ROTATE-X*/\n.test-container.second .test-transform-back:hover .fill {\n  transform: rotateX(45deg);\n}\n\n/*第二个和第三个效果的圆心定位*/\n.test-container.second .test-transform-back.second .fill,\n.test-container.second .test-transform-back.third .fill {\n  transform-origin: 0 100% 0;\n}\n\n/*ROTATE-Y*/\n.test-container.second .test-transform-back.second:hover .fill {\n  transform: rotateY(-45deg);\n}\n\n/*ROTATE(O)*/\n.test-container.second .test-transform-back.third:hover .fill {\n  transform: rotate(45deg);\n}\n```\n\n上面用到了最常用的三个变化效果，分别是 scale（缩放）、rotate（旋转）和 translate（移动）。此外还有很多很实用的属性，下面列出所有的可应用属性。\n\n| 值                                        | 描述                                    |\n| :---------------------------------------- | :-------------------------------------- |\n| none                                      | 定义不进行转换。                        |\n| matrix(n,n,n,n,n,n)                       | 定义 2D 转换，使用六个值的矩阵。        |\n| matrix3d(n,n,n,n,n,n,n,n,n,n,n,n,n,n,n,n) | 定义 3D 转换，使用 16 个值的 4x4 矩阵。 |\n| translate(x,y)                            | 定义 2D 转换。                          |\n| translate3d(x,y,z)                        | 定义 3D 转换。                          |\n| translateX(x)                             | 定义转换，只是用 X 轴的值。             |\n| translateY(y)                             | 定义转换，只是用 Y 轴的值。             |\n| translateZ(z)                             | 定义 3D 转换，只是用 Z 轴的值。         |\n| scale(x[,y]?)                             | 定义 2D 缩放转换。                      |\n| scale3d(x,y,z)                            | 定义 3D 缩放转换。                      |\n| scaleX(x)                                 | 通过设置 X 轴的值来定义缩放转换。       |\n| scaleY(y)                                 | 通过设置 Y 轴的值来定义缩放转换。       |\n| scaleZ(z)                                 | 通过设置 Z 轴的值来定义 3D 缩放转换。   |\n| rotate(angle)                             | 定义 2D 旋转，在参数中规定角度。        |\n| rotate3d(x,y,z,angle)                     | 定义 3D 旋转。                          |\n| rotateX(angle)                            | 定义沿着 X 轴的 3D 旋转。               |\n| rotateY(angle)                            | 定义沿着 Y 轴的 3D 旋转。               |\n| rotateZ(angle)                            | 定义沿着 Z 轴的 3D 旋转。               |\n| skew(x-angle,y-angle)                     | 定义沿着 X 和 Y 轴的 2D 倾斜转换。      |\n| skewX(angle)                              | 定义沿着 X 轴的 2D 倾斜转换。           |\n| skewY(angle)                              | 定义沿着 Y 轴的 2D 倾斜转换。           |\n| perspective(n)                            | 为 3D 转换元素定义透视视图              |\n\n详细参考 W3Schools 的文档。\n\n[CSS3 transform Property](https://www.w3schools.com/cssref/css3_pr_transform.asp)\n',frontmatter:"title: CSS 的过渡效果和变形（transition & transform）\nsubtitle: 过渡动画和变形可以赋予页面生命力。\ndate: 2017-10-16 00:00:00 +8\nexternalCSS: transition-transform\ntags:\n  - CSS"}}}]);
//# sourceMappingURL=post6.3b19f27d.js.map