(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["post5"],{"2a24":function(n,e){n.exports={attributes:{title:"记录一个使用切面遇到的坑",subtitle:"记录一个在使用切面时白白花了我两天时间解决的坑。",date:"2017-10-08T13:01:00.000Z",tags:["Java","Spring","Aspect"]},body:'\n这就是一个坑，在假期要结束的最后一天爆发了，坑一样的问题。只想说，使用切面还是需要慎重，思维还要再严谨一点！\n\n### 先说现象\n\n涉及到两篇文章，一个是造成的原因，一个是遇到了问题。\n\n首先是 [关于 Log4j2 配置和使用的笔记](#/post/关于%20Log4j2%20配置和使用的笔记) 这篇文章，里面关于切面的配置导致了这个问题，现在已经修复了。（没有及时发现所以一开始没想到是这个原因...）\n\n然后就是上一篇文章，[RESTful API 的一个尝试](#/post/RESTful%20API%20的一个尝试) 里面我在准备示例代码的时候发现了问题。\n\n现象就出现在了 `@ExceptionHandler` 注解上。\n\n所有程序中抛出的异常都没有被这个注解所标注的相应的异常处理器处理。这句话可能有点绕，举个例子来说，就是假如我在程序中抛出了 `IOException` 异常，并且我是有一个 `@ExceptionHandler` 标注的异常处理器来处理这个异常的，同时可以保证它在 `@ControllerAdvice` 类中是可以被调用的（因为我用这个异常处理器处理不止一个异常，并且存在可以正常处理的异常），但是现象是这个 `IOException` 没有被处理，直接返回了一个空的响应给客户端。\n\n为此我针对 `@ExceptionHandler` 和 `@ControllerAdvice` 在谷歌和百度上进行了疯狂的搜索，然后又涉及到了 `HandlerExceptionResolver` 等等等等。\n\n能试的方法都试过了，甚至连在 `@ControllerAdvice` 类上加 `@EnableWebMvc` 注解这种白痴的方法都被迫尝试了。（XML 配置时 `@EnableWebMvc` 加这里还是有意义的）\n\n没辙了，现在用的这个环境复杂度较高，debug 启动超级慢。好吧，只有最后的办法了，新建个项目单独导入 spring MVC 框架，重新配置一下然后 debug！！！（早该这样做的）\n\n然后发现，没有问题！！！\n\n`@ExceptionHandler` 注解的异常处理器都可以正常的处理对应的异常！！！\n\n**没道理啊！到底怎么回事？**\n\n我来回 debug 了好几次，把抛出异常到处理异常的过程了解了一下。大致如下。（就大致说下流程不具体到类，套路还是很好理解的）\n\n**1.控制器处理过程中抛出异常**\n\n很好理解，就是个入口。\n\n**2.框架捕获这个异常，然后**\n\n被框架捕获了，然后用一系列反射机制来处理。\n\n**3.在异常发生的控制器类中查找异常处理器**\n\n由于我把异常处理器写在了通知器里面了，所以这一步没成功。但是从这个套路来看，即使 `@ControllerAdvice` 中存在对应的 `@ExceptionHandler` 方法，但我们还是可以在异常抛出的 Controller 中定义一个 `@ExceptionHandler` 来满足当前类的需求。因为首先搜索当前类里面是否能够处理这个异常。\n\n**4.在 Advice 中查找是否有能处理的异常处理器**\n\n到这一步成功了，在缓存的 Advice 中确实找到了我定义的异常处理器，并且正常处理返回了预期的结果给客户端。\n\n（上面虽然总结成 4 步，其实是省略了一大堆细节，比如解析器 first win 之类的）\n\n这就很尴尬了，为什么没有出现问题？\n\n我还是老老实实打开原来的环境，再次进入 debug。等的真够久的，早知道当初用 `@Profile` 把几个重头戏标注出来了。\n\n这次 debug 直接就找到原因了。就是我们标题所说的，切面！！！\n\n在上面的流程中切面的处理是处在 2 和 3 之间的。\n\n**2.5.切面处理异常**\n\n在 Log4j2 的配置中我创建了一个切面来记录各种日志信息，其中就包括了对异常信息的追踪和记录。\n\n坑就坑在这里！！！\n\n异常在被切面处理完之后，就没了！！！\n\n在原本的环境下 debug 的结果，只有 1 到 2.5 这三个步骤。所以原因很明显，被堵塞了。\n\n### 问题原因\n\n我们先来看看这个切面具体什么样吧。\n\n```java\n@Component\n@Aspect\npublic class LogAspect {\n\n    private static Logger logger = LoggerFactory.getLogger(LogAspect.class.getName());\n\n    @Pointcut("execution(* path.*.*.*(..))")\n    public void toPage(){}\n\n    @Around("toPage()")\n    public Object logPages(ProceedingJoinPoint point){\n        Object o = null;\n        try {\n            StringBuilder param = new StringBuilder("Param: ");\n            for (int i = 0; i < point.getArgs().length; i++) {\n                param.append(point.getArgs()[i].toString()).append(\';\');\n            }\n            String param2String = param.toString().trim().equals("Param:") ?\n                    "":param.toString();\n            logger.info("START - {} {} {}", point.getTarget().getClass().getName(),\n                    point.getSignature().getName(), param2String);\n            o = point.proceed();\n            logger.info("END - " + point.getTarget().getClass().getName()\n                    + " " +point.getSignature().getName());\n        } catch (Throwable e) {\n            logger.error("异常 - {} {}", point.getTarget().getClass().getName(),\n                    point.getSignature().getName(),e);\n        }\n        return o;\n    }\n}\n```\n\n写的不是很整洁...\n\n这里有两个重点，是导致这个问题的最根本原因。\n\n**1.使用了 `@Around` 注解**\n\n**2.堵塞了异常**\n\n这两个原因是递进的。因为我使用了 `@Around` 注解，而我没有对异常做处理，导致堵塞了。\n\n`@Around` 注解是一个很方便的东西，但是一定程度上容易导致问题。因为在这个方法里面，目标方法被作为一个参数传递了进来，从此目标方法的控制权就掌握在了 `@Around` 注解的方法手中。生杀予夺一念之差啊。\n\n`@Around` 注解方法好比一个圆圈，目标方法在圆圈之内，是被隔绝的状态。我在写这个切面的时候考虑到了目标方法的返回值需要传递出去，这好比在圆圈之中打开了一个通道，虽然一切都在掌控之下，但是目标方法可以和外界取得一些联系了——返回值可以被传递出去了。\n\n但是想到了开头的我并没有想到结尾。\n\n```java\n        } catch (Throwable e) {\n            logger.error("异常 - {} {}", point.getTarget().getClass().getName(),\n                    point.getSignature().getName(),e);\n        }\n```\n\n这一块在对异常做完记录之后...然后就没有然后了。可想而知，记录完信息之后，切面返回了一个空对象，隐藏了发生了异常的事实。\n\n这就是使用 `@Around` 时必须考虑的问题了。（想说缺点来着，其实想一想还是自己的逻辑不够严谨）\n\n上面的代码修改一下就没有问题了。\n\n```java\n@Component\n@Aspect\npublic class LogAspect {\n\n    private static Logger logger = LoggerFactory.getLogger(LogAspect.class.getName());\n\n    @Pointcut("execution(* path.*.*.*(..))")\n    public void toPage(){}\n\n    @Around("toPage()")\n    public Object logPages(ProceedingJoinPoint point) throws Throwable{ // 抛出\n        Object o = null;\n        try {\n            StringBuilder param = new StringBuilder("Param: ");\n            for (int i = 0; i < point.getArgs().length; i++) {\n                param.append(point.getArgs()[i].toString()).append(\';\');\n            }\n            String param2String = param.toString().trim().equals("Param:") ?\n                    "":param.toString();\n            logger.info("START - {} {} {}", point.getTarget().getClass().getName(),\n                    point.getSignature().getName(), param2String);\n            o = point.proceed();\n            logger.info("END - " + point.getTarget().getClass().getName()\n                    + " " +point.getSignature().getName());\n        } catch (Throwable e) {\n            logger.error("异常 - {} {}", point.getTarget().getClass().getName(),\n                    point.getSignature().getName(),e);\n            throw e; // 处理完之后将异常抛出\n        }\n        return o;\n    }\n}\n```\n\n但是将方法隔绝总归是有风险的。可能下次就从那个角落里面出现了奇怪的问题了呢？而且将三个 log 事件拼凑在一个方法里面平白提升了方法的复杂度，何必呢？\n\n所以，还是分开写吧。下面将三个 log 事件分开了，个人认为这样反而逻辑更清晰了。\n\n```java\n@Component\n@Aspect\npublic class LogAspect {\n\n    private static Logger logger = LoggerFactory.getLogger(LogAspect.class.getName());\n\n    @Pointcut("execution(* path.*.*.*(..))")\n    public void toPage(){}\n\n    @Before("toPage()")\n    public void beforePerform(JoinPoint point) {\n        StringBuilder param = new StringBuilder("Param: ");\n        for (int i = 0; i < point.getArgs().length; i++) {\n            param.append(point.getArgs()[i].toString()).append(\';\');\n        }\n        String param2String = param.toString().trim().equals("Param:") ?\n                "":param.toString();\n        logger.info("START - {} {} {}", point.getTarget().getClass().getName(),\n                point.getSignature().getName(), param2String);\n    }\n\n    @After("toPage()")\n    public void afterPerform(JoinPoint point) {\n        logger.info("END   - {} {}", point.getTarget().getClass().getName(),\n                point.getSignature().getName());\n    }\n\n    @AfterThrowing(throwing = "e",pointcut = "toPage()")\n    public void logException(JoinPoint point, Throwable e){\n        logger.error("异常 - {} {}", point.getTarget().getClass().getName(),\n                point.getSignature().getName(),e);\n    }\n\n}\n```\n\n### 吃一堑长一智\n',frontmatter:"title: 记录一个使用切面遇到的坑\nsubtitle: 记录一个在使用切面时白白花了我两天时间解决的坑。\ndate: 2017-10-8 21:01:00 +8\ntags:\n  - Java\n  - Spring\n  - Aspect"}}}]);
//# sourceMappingURL=post5.5dc807f2.js.map